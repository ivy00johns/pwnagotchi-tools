import os
import json
import re
from random import randint
import argparse

# Define constants for paths
HASHCAT_PATH =  "C:\\[PATH]\\hashcat-6.2.6\\"
PROJECT_PATH =  "C:\\[PATH]\\pwnagotchi-tooling\\"
WORDLIST_PATH = "C:\\[PATH]\\wordlists\\"

# Define constants for hashcat script
HASHCAT_SCRIPT_VERSION = "v1"
TEMP_ABORT = "--hwmon-temp-abort=100"
WORKLOAD_PROFILE = "-w 2"

# Define paths for hashcat related files
HASHCAT_POTFILE_PATH = '"' + PROJECT_PATH + 'hashcat\\hashcat-potfile.txt"'
HASHCAT_OUTPUT_PATH = '"' + PROJECT_PATH + 'hashcat\\hashcat-output.txt"'
RULE_PATH = PROJECT_PATH + "hashcat\\rules\\"
WORD_NINJA_PATH = PROJECT_PATH + "hashcat"

# Global data
network_cracked_status_data = {}
network_bssid_data = {}
session_scripts = []

def generate_hashcat_script(filename, override=False):
	global HASHCAT_SCRIPT_VERSION
	global session_scripts
	global PROJECT_PATH
	global HASHCAT_PATH
	global WORDLIST_PATH

	bssid = get_bssid(filename)
	ssid = filename.split("_")[0]
	session = ""
	hash_type = ""
	file_id = ""
	hash_path = ""

	if ".hc22000" in filename:
		hash_type = "-m 22000"
		file_id = filename.split(".hc22000")[0]
		hash_path = '"' + PROJECT_PATH + 'handshakes\\hccapx\\' + filename + '"'
	else:
		hash_type = "-m 22000"
		file_id = filename.split(".pmkid")[0]
		hash_path = '"' + PROJECT_PATH + 'handshakes\\pmkid\\' + filename + '"'
	session = "--session " + file_id

	# Check if the file is already tracked and override is False
	if not override and filename in network_cracked_status_data:
		print(f"{filename} is already being tracked.")
		return

	attacks = [
		["-a 0", "known-wpa-passwords.txt", "quick-ssid.rule"],
		["-a 0", "known-wpa-passwords.txt", "unix-ninja-leetspeak.rule"],
		["-a 0", "known-wpa-passwords.txt", "rockyou-30000.rule"],
		["-a 0", "known-wpa-passwords.txt", "d3ad0ne.rule"],
		["-a 0", "known-wpa-passwords.txt", "4-digit-append.rule"]
	]

	# Build the hashcat command
	hashcat_command_prefix = f'hashcat {hash_type} {session}_{randint(1000, 9999)} {TEMP_ABORT} {WORKLOAD_PROFILE}'

	f = open("./hashcat/scripts/" + file_id + ".bat", "w")
	script = f":: {HASHCAT_SCRIPT_VERSION}\n"
	script += f'cd {" /d " if PROJECT_PATH[0] != HASHCAT_PATH[0] else ""}"{HASHCAT_PATH}"\n'

	for attack in attacks:
		hashcat_command = hashcat_command_prefix
		if "0" in attack[0]:
			hashcat_command = process_attack_type_0(attack, hashcat_command, ssid)
		elif "1" in attack[0]:
			hashcat_command = process_attack_type_1(attack, hashcat_command)
		elif "3" in attack[0]:
			hashcat_command = process_attack_type_3(attack, hashcat_command)
		elif "6" in attack[0]:
			hashcat_command = process_attack_type_6(attack, hashcat_command)

		script += hashcat_command

	script += f'cd {" /d " if PROJECT_PATH[0] != HASHCAT_PATH[0] else ""}"{PROJECT_PATH}"\n'
	script += f'python "{PROJECT_PATH}update-network-status.py" {filename}'
	f.write(script)
	f.close()

	session_scripts.append(file_id + ".bat")

def process_attack_type_0(attack, hashcat_command, ssid):
	if "bssid.rule" in attack[1]:
		return f'echo {get_bssid(filename)} | {hashcat_command} -r "{RULE_PATH}{attack[1]}"'
	elif ("ssid-ninja.rule" in attack[1]) or ("4-digit-append.rule" in attack[1]):
		return f'python "{WORD_NINJA_PATH}\\wordNinjaGenerator.py" {ssid} | {hashcat_command} -r "{RULE_PATH}{attack[1]}"'
	else:
		return process_wordlist_attack(attack, hashcat_command)

def process_attack_type_1(attack, hashcat_command):
	return f'{hashcat_command} "{WORDLIST_PATH}{attack[1]}" "{WORDLIST_PATH}{attack[2]}"'

def process_attack_type_3(attack, hashcat_command):
	return f'{hashcat_command} {attack[1]}'

def process_attack_type_6(attack, hashcat_command):
	return f'{hashcat_command} "{WORDLIST_PATH}{attack[1]}" {attack[2]}'

def process_wordlist_attack(attack, hashcat_command):
	hashcat_command += f' "{WORDLIST_PATH}{attack[1]}"'
	if len(attack) > 2:
		hashcat_command += f' -r "{RULE_PATH}{attack[2]}"'
	return hashcat_command + "\n"

def get_bssid(filename):
	global network_bssid_data
	pcap_file_name = filename.replace(".pmkid", ".pcap")
	pcap_file_name = pcap_file_name.replace(".hc22000", ".pcap")

	try:
		bssid = network_bssid_data[pcap_file_name]["bssid"]
	except KeyError:
		raw_mac = re.findall(r'(?:[0-9A-Fa-f]{2}){6}', filename.split("_")[-1])[0].upper()
		bssid = ':'.join([raw_mac[i: i + 2] for i in range(0, len(raw_mac), 2)])

	return bssid

def generate_script_for_batch():
	global session_scripts
	global PROJECT_PATH
	if len(session_scripts) > 1:
		f = open("./hashcat/scripts/batches/batch-" + str(randint(1000, 9999)) + ".bat", "w")
		batch_script = ""
		for script in session_scripts:
			batch_script += f'call "{PROJECT_PATH}hashcat\\scripts\\{script}"\n'
		f.write(batch_script)
		f.close()
		print(f"\nBatch script created for {len(session_scripts)} scripts")

def add_network_to_network_cracked_status_data(filename):
	global network_cracked_status_data
	global HASHCAT_SCRIPT_VERSION
	network_cracked_status_data[filename] = {
		"ssid": filename.split("_")[0],
		"bssid": get_bssid(filename),
		"status": "waiting",
		"version": HASHCAT_SCRIPT_VERSION
	}

def generate_scripts_for_pmkids_and_hccapxs(force_override=False):
	global HASHCAT_SCRIPT_VERSION
	for folder in ["pmkid", "hccapx"]:
		for filename in os.listdir(f"./handshakes/{folder}"):
			if filename not in network_cracked_status_data or force_override:
				add_network_to_network_cracked_status_data(filename)
				print(f"Generating hashcat script for {filename}")
				generate_hashcat_script(filename, force_override)
			else:
				if network_cracked_status_data[filename]["version"] != HASHCAT_SCRIPT_VERSION and \
						network_cracked_status_data[filename]["status"] == "waiting":
					print(f"Generating hashcat script for {filename}")
					generate_hashcat_script(filename, force_override)

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description="Generate hashcat scripts.")
	parser.add_argument("--override", action="store_true", help="Override existing tracking and regenerate scripts.")
	args = parser.parse_args()

	def print_logo():
		print('''
		 ▄ .▄ ▄▄▄· .▄▄ ·  ▄ .▄ ▄▄·  ▄▄▄· ▄▄▄▄▄    .▄▄ ·  ▄▄· ▄▄▄  ▪   ▄▄▄·▄▄▄▄▄
		██▪▐█▐█ ▀█ ▐█ ▀. ██▪▐█▐█ ▌▪▐█ ▀█ •██      ▐█ ▀. ▐█ ▌▪▀▄ █·██ ▐█ ▄█•██  
		██▀▐█▄█▀▀█ ▄▀▀▀█▄██▀▐███ ▄▄▄█▀▀█  ▐█.▪    ▄▀▀▀█▄██ ▄▄▐▀▀▄ ▐█· ██▀· ▐█.▪
		██▌▐▀▐█ ▪▐▌▐█▄▪▐███▌▐▀▐███▌▐█ ▪▐▌ ▐█▌·    ▐█▄▪▐█▐███▌▐█•█▌▐█▌▐█▪·• ▐█▌·
		▀▀▀ · ▀  ▀  ▀▀▀▀ ▀▀▀ ··▀▀▀  ▀  ▀  ▀▀▀      ▀▀▀▀ ·▀▀▀ .▀  ▀▀▀▀.▀    ▀▀▀ 
				   ▄▄ • ▄▄▄ . ▐ ▄
		'''
	)

	print_logo()

	generate_scripts_for_pmkids_and_hccapxs(args.override)
	generate_script_for_batch()
